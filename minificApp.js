const firebaseConfig = { apiKey: "AIzaSyD9Lwkgd9NqJ5I0termPqVZxNxFk5Y-J4s", authDomain: "calendario-tareas-app.firebaseapp.com", projectId: "calendario-tareas-app", storageBucket: "calendario-tareas-app.firebasestorage.app", messagingSenderId: "646091363424", appId: "1:646091363424:web:d923bbcc0224bd1bed5f05" }; let tasks = {}, currentDate = new Date, notificationsEnabled = !1, draggedTask = null, draggedFromDate = null, currentEditingTask = null, currentEditingDate = null, lastDeletedTask = null, lastDeletedDate = null, isOnline = navigator.onLine, currentUser = null, db = null, auth = null, selectedDateForPanel = null, notificationInterval = null, lastNotificationCheck = 0, sentNotifications = new Set, notificationStatus = { morning: !1, midday: !1, evening: !1, taskReminders: new Set }, taskChangeLog = JSON.parse( localStorage.getItem( "taskChangeLog" ) ) || [], syncQueue = new Map, syncTimeout = null, isSyncing = !1, lastSyncTime = 0; const SYNC_DEBOUNCE_TIME = 2e3, MIN_SYNC_INTERVAL = 5e3; let dailyTaskLogs = JSON.parse( localStorage.getItem( "dailyTaskLogs" ) || "{}" ); const TASK_STATES = { pending: { label: "Pendiente", class: "bg-gray-200 text-gray-800", icon: "fa-clock" }, inProgress: { label: "En Proceso", class: "bg-blue-200 text-blue-800", icon: "fa-play" }, paused: { label: "Pausada", class: "bg-orange-200 text-orange-800", icon: "fa-pause" }, completed: { label: "Completada", class: "bg-green-200 text-green-800", icon: "fa-check" } }, PRIORITY_LEVELS = { 1: { label: "Muy Importante", class: "bg-red-500 text-white", color: "#EF4444" }, 2: { label: "Importante", class: "bg-orange-400 text-white", color: "#F97316" }, 3: { label: "Moderado", class: "bg-blue-400 text-white", color: "#3B82F6" }, 4: { label: "No Prioritario", class: "bg-gray-400 text-white", color: "#6B7280" } }; let deferredPrompt; function addToChangeLog( e, t, n, a = null, s = null, i = null ) { const o = new Date, r = { id: Date.now().toString(), action: e, taskTitle: t, taskId: i, oldState: a, newState: s, timestamp: o.toISOString(), time: o.toLocaleTimeString( "es-ES", { hour: "2-digit", minute: "2-digit", second: "2-digit" } ), date: n, readableDate: new Date( n + "T12:00:00" ).toLocaleDateString( "es-ES", { weekday: "long", year: "numeric", month: "long", day: "numeric" } ) }; dailyTaskLogs[ n ] || ( dailyTaskLogs[ n ] = [] ), dailyTaskLogs[ n ].unshift( r ), dailyTaskLogs[ n ].length > 50 && ( dailyTaskLogs[ n ] = dailyTaskLogs[ n ].slice( 0, 50 ) ), "stateChanged" === e && "completed" === s && i && calculateTaskDuration( n, i, t ), localStorage.setItem( "dailyTaskLogs", JSON.stringify( dailyTaskLogs ) ), taskChangeLog.unshift( r ), taskChangeLog.length > 200 && ( taskChangeLog = taskChangeLog.slice( 0, 200 ) ), localStorage.setItem( "taskChangeLog", JSON.stringify( taskChangeLog ) ) } function calculateTaskDuration( e, t, n ) { const a = dailyTaskLogs[ e ] || [], s = a.find( ( e => e.taskId === t && "stateChanged" === e.action && "completed" === e.newState ) ), i = a.slice().reverse().find( ( e => e.taskId === t && "stateChanged" === e.action && "inProgress" === e.newState ) ); if ( s && i && !s.duration ) { const e = new Date( i.timestamp ), t = new Date( s.timestamp ) - e; if ( t > 0 ) { const e = Math.floor( t / 36e5 ), n = Math.floor( t % 36e5 / 6e4 ); let a = ""; a = e > 0 ? `${e}h ${n}min` : `${n}min`, s.duration = a, s.durationMs = t, localStorage.setItem( "dailyTaskLogs", JSON.stringify( dailyTaskLogs ) ) } } } function showDayChangeLog( e ) { const t = dailyTaskLogs[ e ] || [], n = new Date( e + "T12:00:00" ), a = document.createElement( "div" ); a.id = "dayChangeLogModal", a.className = "fixed inset-0 bg-black bg-opacity-50 z-50 flex items-center justify-center p-4", a.innerHTML = `\n        <div class="bg-white rounded-xl shadow-2xl max-w-2xl w-full max-h-[80vh] overflow-hidden">\n            <div class="sticky top-0 bg-white border-b p-6 flex justify-between items-center">\n                <h3 class="text-lg font-semibold text-gray-800">\n                    <i class="fas fa-history text-blue-500 mr-2"></i>\n                    Registro de actividad del ${n.toLocaleDateString( "es-ES", { weekday: "long", day: "numeric", month: "long" } )}\n                </h3>\n                <button onclick="closeAllModals()" class="text-gray-500 hover:text-gray-700 transition">\n                    <i class="fas fa-times"></i>\n                </button>\n            </div>\n            <div class="p-6 overflow-y-auto max-h-96">\n                ${0 === t.length ? '\n                    <div class="text-center py-8 text-gray-500">\n                        <i class="fas fa-clipboard-list text-4xl mb-3 opacity-50"></i>\n                        <p>No hay registros para este d√≠a</p>\n                    </div>\n                ' : `\n                    <div class="space-y-3">\n                        ${t.map( ( e => `\n                            <div class="bg-gray-50 rounded-lg p-4 border-l-4 ${getDayLogColor( e.action )}">\n                                <div class="flex justify-between items-start">\n                                    <div class="flex-1">\n                                        <div class="font-medium text-sm text-gray-800">\n                                            ${getDayLogIcon( e.action )} ${getDayLogMessage( e )}\n                                        </div>\n                                        <div class="text-xs text-gray-500 mt-1 flex items-center space-x-3">\n                                            <span class="bg-blue-100 text-blue-700 px-2 py-1 rounded font-mono">\n                                                ${e.time}\n                                            </span>\n                                            ${e.taskId ? `<span class="text-gray-400">ID: ${e.taskId.substring( 0, 8 )}...</span>` : ""}\n                                        </div>\n                                        ${getStateChangeInfo( e )}\n                                        ${e.duration ? `\n                                            <div class="mt-2 bg-green-100 text-green-800 px-2 py-1 rounded text-xs inline-block">\n                                                <i class="fas fa-stopwatch mr-1"></i>\n                                                Tiempo total: ${e.duration}\n                                            </div>\n                                        ` : ""}\n                                    </div>\n                                </div>\n                            </div>\n                        ` ) ).join( "" )}\n                    </div>\n                `}\n                <div class="mt-6 flex justify-end space-x-3">\n                    ${t.length > 0 ? `\n                        <button onclick="clearDayChangeLog('${e}')" \n                                class="bg-red-500 text-white px-4 py-2 rounded-lg hover:bg-red-600 transition">\n                            <i class="fas fa-trash mr-2"></i>Limpiar Registro\n                        </button>\n                    ` : ""}\n                    <button onclick="closeAllModals()" \n                            class="bg-gray-300 text-gray-700 px-4 py-2 rounded-lg hover:bg-gray-400 transition">\n                        Cerrar\n                    </button>\n                </div>\n            </div>\n        </div>\n    `, document.body.appendChild( a ) } function getDayLogColor( e ) { return { created: "border-green-500", stateChanged: "border-blue-500", paused: "border-orange-500", resumed: "border-blue-500", edited: "border-yellow-500", deleted: "border-red-500", moved: "border-purple-500" }[ e ] || "border-gray-500" } function getDayLogIcon( e ) { return { created: '<i class="fas fa-plus text-green-600"></i>', stateChanged: '<i class="fas fa-sync-alt text-blue-600"></i>', paused: '<i class="fas fa-pause text-orange-600"></i>', resumed: '<i class="fas fa-play text-blue-600"></i>', edited: '<i class="fas fa-edit text-yellow-600"></i>', deleted: '<i class="fas fa-trash text-red-600"></i>', moved: '<i class="fas fa-arrows-alt text-purple-600"></i>' }[ e ] || '<i class="fas fa-info text-gray-600"></i>' } function getDayLogMessage( e ) { return { created: `Tarea creada: "${e.taskTitle}"`, stateChanged: `"${e.taskTitle}": cambio de estado`, paused: `"${e.taskTitle}": pausada temporalmente`, resumed: `"${e.taskTitle}": reanudada`, edited: `Tarea editada: "${e.taskTitle}"`, deleted: `Tarea eliminada: "${e.taskTitle}"`, moved: `Tarea movida: "${e.taskTitle}"` }[ e.action ] || `Cambio en: "${e.taskTitle}"` } function getStateChangeInfo( e ) { if ( ( "stateChanged" === e.action || "paused" === e.action || "resumed" === e.action ) && e.oldState && e.newState ) { const t = { pending: "Pendiente", inProgress: "En Proceso", paused: "Pausada", completed: "Completada" }; return `\n            <div class="text-xs text-blue-600 mt-1 bg-blue-50 px-2 py-1 rounded">\n                ${t[ e.oldState ] || e.oldState} ‚Üí ${t[ e.newState ] || e.newState}\n            </div>\n        ` } return "" } function clearDayChangeLog( e ) { confirm( "¬øEst√°s seguro de que quieres limpiar el registro de este d√≠a?" ) && ( delete dailyTaskLogs[ e ], localStorage.setItem( "dailyTaskLogs", JSON.stringify( dailyTaskLogs ) ), showNotification( "Registro del d√≠a limpiado", "success" ), closeAllModals() ) } function enqueueSync( e, t, n ) { if ( !n || !n.id ) return void console.error( "‚ùå enqueueSync: task o task.id faltante", { operation: e, dateStr: t, task: n } ); const a = `${e}-${t}-${n.id}`, s = syncQueue.get( a ); s && Date.now() - s.timestamp < 1e3 ? console.log( "‚ö†Ô∏è Operaci√≥n duplicada reciente ignorada:", a ) : ( syncQueue.set( a, { operation: e, dateStr: t, task: { ...n }, timestamp: Date.now(), attempts: 0 } ), console.log( "üìù Operaci√≥n encolada:", { key: a, operation: e, queueSize: syncQueue.size, taskTitle: n.title } ), isOnline ? syncQueue.size > 0 && ( updateSyncIndicator( "pending" ), syncTimeout && clearTimeout( syncTimeout ), syncTimeout = setTimeout( ( () => { syncQueue.size > 0 && !isSyncing && processSyncQueue() } ), SYNC_DEBOUNCE_TIME ) ) : updateSyncIndicator( "offline" ) ) } async function processSyncQueue() { if ( console.log( "üîÑ Iniciando processSyncQueue...", { currentUser: !!currentUser, isOnline: isOnline, isSyncing: isSyncing, queueSize: syncQueue.size, dbInitialized: !!db } ), !currentUser ) return console.log( "‚ùå No hay usuario logueado" ), void updateSyncIndicator( "offline" ); if ( !isOnline ) return console.log( "‚ùå Sin conexi√≥n a internet" ), void updateSyncIndicator( "offline" ); if ( !db ) return console.log( "‚ùå Firebase no inicializado" ), void updateSyncIndicator( "error" ); if ( isSyncing ) console.log( "‚ö†Ô∏è Sync ya en progreso" ); else { if ( 0 === syncQueue.size ) return console.log( "‚úÖ Cola vac√≠a, actualizando indicador" ), void updateSyncIndicator( "success" ); isSyncing = !0, updateSyncIndicator( "syncing" ); try { const e = Array.from( syncQueue.values() ); console.log( `üì§ Procesando ${e.length} operaciones:`, e ); const t = db.collection( "users" ).doc( currentUser.uid ).collection( "tasks" ), n = 500; let a = 0; for ( let s = 0; s < e.length; s += n ) { const i = db.batch(), o = e.slice( s, s + n ); for ( const e of o ) { const n = `${e.dateStr}_${e.task?.id}`, s = t.doc( n ); switch ( e.operation ) { case "upsert": e.task && ( i.set( s, { ...e.task, date: e.dateStr, lastModified: new Date }, { merge: !0 } ), a++ ); break; case "delete": i.delete( s ), a++ } } a > 0 && ( await i.commit(), console.log( `‚úÖ Lote ${Math.floor( s / n ) + 1} completado: ${o.length} ops` ) ) } syncQueue.clear(), lastSyncTime = Date.now(), console.log( `üéâ Sync completado: ${a} operaciones procesadas` ), updateSyncIndicator( "success" ), a >= 3 && showNotification( `${a} cambios sincronizados`, "success" ) } catch ( e ) { console.error( "‚ùå Error en processSyncQueue:", e ), "permission-denied" === e.code ? ( showNotification( "Error de permisos en Firebase", "error" ), updateSyncIndicator( "error" ) ) : "unavailable" === e.code ? ( showNotification( "Firebase temporalmente no disponible", "error" ), updateSyncIndicator( "pending" ), setTimeout( ( () => { syncQueue.size > 0 && processSyncQueue() } ), 1e4 ) ) : ( updateSyncIndicator( "error" ), showNotification( "Error de sincronizaci√≥n: " + e.message, "error" ) ) } finally { isSyncing = !1, console.log( "üèÅ processSyncQueue finalizado, isSyncing = false" ) } } } async function syncToFirebase() { if ( !currentUser || !isOnline ) return void showNotification( "No hay conexi√≥n disponible", "error" ); if ( isSyncing ) return void showNotification( "Sincronizaci√≥n en progreso...", "info" ); const e = document.getElementById( "syncBtn" ), t = e ? e.innerHTML : ""; try { e && ( e.disabled = !0, e.innerHTML = '<i class="fas fa-spinner fa-spin mr-2"></i>Sincronizando...' ), syncQueue.size > 0 && ( console.log( "üîÑ Procesando cola pendiente antes del sync manual" ), await processSyncQueue() ), isSyncing = !0, updateSyncIndicator( "syncing" ); const t = db.collection( "users" ).doc( currentUser.uid ).collection( "tasks" ), n = []; if ( Object.entries( tasks ).forEach( ( ( [ e, t ] ) => { t.forEach( ( t => { n.push( { ...t, date: e, lastModified: new Date } ) } ) ) } ) ), n.length > 0 ) { const e = db.batch(); n.forEach( ( n => { const a = t.doc( `${n.date}_${n.id}` ); e.set( a, n, { merge: !0 } ) } ) ), await e.commit(), console.log( `üì§ ${n.length} tareas locales subidas` ) } const a = await t.get(); let s = 0; if ( !a.empty ) { const e = {}; a.forEach( ( t => { const n = t.data(), a = n.date; e[ a ] || ( e[ a ] = [] ), e[ a ].push( { id: n.id, title: n.title, description: n.description || "", time: n.time || "", completed: n.completed || !1 } ) } ) ), Object.keys( e ).forEach( ( t => { tasks[ t ] || ( tasks[ t ] = [] ), e[ t ].forEach( ( e => { tasks[ t ].some( ( t => t.id === e.id || t.title === e.title && t.time === e.time ) ) || ( tasks[ t ].push( e ), s++ ) } ) ) } ) ), s > 0 && ( saveTasks(), renderCalendar(), updateProgress() ) } updateSyncIndicator( "success" ); showNotification( n.length + s > 0 ? `Sincronizaci√≥n completa: ${n.length} subidas, ${s} descargadas` : "Todo est√° sincronizado", "success" ), notificationsEnabled && "granted" === Notification.permission && ( stopNotificationService(), setTimeout( ( () => startNotificationService() ), 1e3 ) ) } catch ( e ) { console.error( "Error en sync manual:", e ), updateSyncIndicator( "error" ), showNotification( "Error en sincronizaci√≥n: " + e.message, "error" ) } finally { isSyncing = !1, e && ( e.disabled = !1, e.innerHTML = t || '<i class="fas fa-sync-alt mr-2"></i>Sincronizar' ) } } function showSyncStats() { const e = Object.values( tasks ).reduce( ( ( e, t ) => e + t.length ), 0 ), t = syncQueue.size, n = lastSyncTime ? new Date( lastSyncTime ).toLocaleTimeString() : "Nunca", a = document.createElement( "div" ); a.className = "fixed inset-0 bg-black bg-opacity-50 z-50 flex items-center justify-center p-4", a.innerHTML = `\n        <div class="bg-white rounded-xl shadow-xl max-w-md w-full p-6">\n            <div class="flex justify-between items-center mb-4">\n                <h3 class="text-lg font-semibold text-gray-800">\n                    <i class="fas fa-chart-bar text-blue-500 mr-2"></i>Estad√≠sticas de Sync\n                </h3>\n                <button onclick="this.closest('.fixed').remove()" class="text-gray-500 hover:text-gray-700">\n                    <i class="fas fa-times"></i>\n                </button>\n            </div>\n            <div class="space-y-3 text-sm">\n                <div class="flex justify-between">\n                    <span>Total de tareas:</span>\n                    <span class="font-medium">${e}</span>\n                </div>\n                <div class="flex justify-between">\n                    <span>Operaciones pendientes:</span>\n                    <span class="font-medium ${t > 0 ? "text-orange-600" : "text-green-600"}">${t}</span>\n                </div>\n                <div class="flex justify-between">\n                    <span>√öltima sincronizaci√≥n:</span>\n                    <span class="font-medium">${n}</span>\n                </div>\n                <div class="flex justify-between">\n                    <span>Estado de conexi√≥n:</span>\n                    <span class="font-medium ${isOnline ? "text-green-600" : "text-red-600"}">\n                        ${isOnline ? "Conectado" : "Desconectado"}\n                    </span>\n                </div>\n                <div class="flex justify-between">\n                    <span>Usuario activo:</span>\n                    <span class="font-medium ${currentUser ? "text-green-600" : "text-red-600"}">\n                        ${currentUser ? "S√≠" : "No"}\n                    </span>\n                </div>\n            </div>\n            <div class="mt-6 flex space-x-3">\n                <button onclick="syncToFirebase(); this.closest('.fixed').remove();" \n                        class="flex-1 bg-blue-600 text-white py-2 px-4 rounded-lg hover:bg-blue-700 transition">\n                    <i class="fas fa-sync-alt mr-2"></i>Sync Ahora\n                </button>\n                <button onclick="this.closest('.fixed').remove()" \n                        class="flex-1 bg-gray-300 text-gray-700 py-2 px-4 rounded-lg hover:bg-gray-400 transition">\n                    Cerrar\n                </button>\n            </div>\n        </div>\n    `, document.body.appendChild( a ) } function exportToExcelOffline() { if ( "undefined" == typeof XLSX ) return void showNotification( "Funcionalidad de exportaci√≥n no disponible sin conexi√≥n", "error" ); const e = XLSX.utils.book_new(), t = [ [ "Fecha", "T√≠tulo", "Descripci√≥n", "Hora", "Estado", "Prioridad" ] ]; Object.entries( tasks ).forEach( ( ( [ e, n ] ) => { n.forEach( ( n => { const a = PRIORITY_LEVELS[ n.priority ] || PRIORITY_LEVELS[ 3 ], s = TASK_STATES[ n.state ] || TASK_STATES.pending; t.push( [ e, n.title, n.description || "", n.time || "", s.label, a.label ] ) } ) ) } ) ); const n = XLSX.utils.aoa_to_sheet( t ); XLSX.utils.book_append_sheet( e, n, "Tareas" ); const a = `tareas_offline_${getTodayString()}.xlsx`; XLSX.writeFile( e, a ), showNotification( `Excel exportado: ${a}`, "success" ) } function getTodayString() { const e = new Date; return `${e.getFullYear()}-${String( e.getMonth() + 1 ).padStart( 2, "0" )}-${String( e.getDate() ).padStart( 2, "0" )}` } function isDatePast( e ) { const t = new Date, n = new Date( e + "T00:00:00" ); return t.setHours( 0, 0, 0, 0 ), n.setHours( 0, 0, 0, 0 ), n < t } function setupDateInput() { const e = document.getElementById( "taskDate" ), t = document.getElementById( "taskTime" ); if ( e ) { const t = getTodayString(); e.setAttribute( "min", t ), e.value = t } if ( t ) { const e = new Date, n = String( e.getHours() ).padStart( 2, "0" ), a = String( e.getMinutes() ).padStart( 2, "0" ); t.value = `${n}:${a}` } } function initFirebase() { try { if ( !navigator.onLine ) return console.log( "üîß Iniciando en modo offline" ), void initOfflineMode(); firebase.initializeApp( firebaseConfig ), db = firebase.firestore(), auth = firebase.auth(), db.enablePersistence( { synchronizeTabs: !0, experimentalTabSynchronization: !0 } ).then( ( () => { console.log( "‚úÖ Persistencia de Firebase habilitada" ) } ) ).catch( ( e => { console.warn( "‚ö†Ô∏è Persistencia fall√≥:", e.code ), "failed-precondition" === e.code ? console.warn( "M√∫ltiples tabs abiertas" ) : "unimplemented" === e.code && console.warn( "Persistencia no soportada" ) } ) ), auth.onAuthStateChanged( ( e => { currentUser = e, updateUI(), e && navigator.onLine ? ( updateSyncIndicator( "success" ), setTimeout( ( () => { isOnline && !isSyncing && syncFromFirebase() } ), 1e3 ) ) : e && !navigator.onLine ? ( updateSyncIndicator( "offline" ), showOfflineMessage() ) : updateSyncIndicator( "offline" ) } ) ), hideLoadingScreen() } catch ( e ) { console.error( "‚ùå Error inicializando Firebase:", e ), initOfflineMode() } } function initOfflineMode() { console.log( "üîß Iniciando aplicaci√≥n en modo offline" ), isOnline = !1, currentUser = getOfflineUser(); const e = document.getElementById( "firebaseStatus" ); e && e.classList.add( "force-hidden" ), updateUI(), hideLoadingScreen(), showOfflineModeMessage(), setupOfflineFeatures() } function showOfflineModeMessage() { const e = document.createElement( "div" ); e.id = "offlineModeMessage", e.className = "fixed bottom-4 right-4 bg-gray-800 text-white text-sm px-4 py-2 rounded-lg shadow-lg z-30 transition-all duration-300", e.innerHTML = '\n    <div class="flex items-center space-x-2">\n      <i class="fas fa-hard-drive text-yellow-400"></i>\n      <span>Modo local activo</span>\n      <button onclick="this.parentElement.parentElement.remove()" class="ml-2 text-gray-300 hover:text-white">\n        <i class="fas fa-times"></i>\n      </button>\n    </div>\n  ', document.body.appendChild( e ), setTimeout( ( () => { document.getElementById( "offlineModeMessage" ) && e.remove() } ), 5e3 ) } function getOfflineUser() { let e = localStorage.getItem( "offlineUser" ); return e ? e = JSON.parse( e ) : ( e = { uid: "offline-" + Date.now(), displayName: "Usuario Offline", email: "usuario@offline.local", photoURL: null, isOffline: !0 }, localStorage.setItem( "offlineUser", JSON.stringify( e ) ) ), e } function setupOfflineFeatures() { notificationInterval && clearInterval( notificationInterval ), updateOfflineUI() } function shouldShowSyncIndicators() { return currentUser && !currentUser.isOffline && isOnline } function updateOfflineUI() { [ { id: "loginBtn", text: "Sin conexi√≥n para login" }, { id: "logoutBtn", text: "Logout offline" } ].forEach( ( ( { id: e, text: t } ) => { const n = document.getElementById( e ); n && ( n.title = t, isOnline ? n.classList.remove( "opacity-50" ) : n.classList.add( "opacity-50" ) ) } ) ) } function showOfflineMessage() { const e = document.createElement( "div" ); e.id = "offlineMessage", e.className = "fixed top-16 left-4 right-4 bg-orange-100 border-l-4 border-orange-500 text-orange-700 p-4 rounded-lg shadow-lg z-40", e.innerHTML = '\n    <div class="flex items-start">\n      <div class="flex-shrink-0">\n        <i class="fas fa-wifi-slash text-orange-500"></i>\n      </div>\n      <div class="ml-3 flex-1">\n        <p class="text-sm font-medium">\n          Modo Sin Conexi√≥n Activo\n        </p>\n        <p class="text-xs mt-1">\n          ‚Ä¢ Tus tareas se guardan localmente<br>\n          ‚Ä¢ Se sincronizar√°n cuando vuelva la conexi√≥n<br>\n          ‚Ä¢ Funcionalidad limitada disponible\n        </p>\n        <div class="mt-2 flex items-center space-x-2 text-xs">\n          <span class="flex items-center">\n            <i class="fas fa-check text-green-600 mr-1"></i>\n            Crear/editar tareas\n          </span>\n          <span class="flex items-center">\n            <i class="fas fa-times text-red-600 mr-1"></i>\n            Sync en tiempo real\n          </span>\n        </div>\n      </div>\n      <button onclick="hideOfflineMessage()" class="flex-shrink-0 ml-4 text-orange-400 hover:text-orange-600">\n        <i class="fas fa-times"></i>\n      </button>\n    </div>\n  '; const t = document.getElementById( "offlineMessage" ); t && t.remove(), document.body.appendChild( e ), setTimeout( ( () => { document.getElementById( "offlineMessage" ) && hideOfflineMessage() } ), 1e4 ) } function hideOfflineMessage() { const e = document.getElementById( "offlineMessage" ); e && e.remove() } function initNotifications() { if ( !( "Notification" in window ) ) return void console.warn( "Este navegador no soporta notificaciones" ); /Android|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test( navigator.userAgent ); "granted" === Notification.permission && ( notificationsEnabled = !0, updateNotificationButton(), startNotificationService() ), updateNotificationButton() } function setupNetworkListeners() { window.addEventListener( "online", handleOnline ), window.addEventListener( "offline", handleOffline ), setInterval( ( () => { const e = navigator.onLine; e !== isOnline && ( e ? handleOnline() : handleOffline() ) } ), 3e4 ) } function handleOnline() { console.log( "üåê Conexi√≥n restaurada" ), isOnline = !0, hideOfflineMessage(), currentUser && currentUser.isOffline ? initFirebase() : currentUser && ( updateSyncIndicator( "success" ), updateOfflineUI(), setTimeout( ( () => { processSyncQueue(), syncFromFirebase() } ), 1e3 ), showNotification( "Conexi√≥n restaurada. Sincronizando...", "success" ) ) } function handleOffline() { console.log( "üìµ Conexi√≥n perdida" ), isOnline = !1, updateOfflineUI(), currentUser && !currentUser.isOffline && ( updateSyncIndicator( "offline" ), showOfflineMessage(), showNotification( "Trabajando sin conexi√≥n. Los cambios se sincronizar√°n cuando vuelva internet.", "info" ) ) } function cleanupUIOnLogout() { const e = document.getElementById( "firebaseStatus" ); e && e.classList.add( "hidden", "force-hidden" ); document.querySelectorAll( ".notification" ).forEach( ( e => { const t = e.textContent.toLowerCase(); ( t.includes( "sincroniz" ) || t.includes( "firebase" ) || t.includes( "conexi√≥n" ) ) && e.remove() } ) ), syncTimeout && ( clearTimeout( syncTimeout ), syncTimeout = null ), syncQueue.clear() } function updateSyncIndicator( e ) { const t = document.getElementById( "firebaseStatus" ), n = document.getElementById( "statusIcon" ), a = document.getElementById( "statusText" ); if ( !currentUser || currentUser.isOffline || !t || !n || !a ) return void ( t && t.classList.add( "hidden" ) ); if ( t.classList.contains( "force-hidden" ) ) return; const s = syncQueue.size; console.log( `üîÑ Actualizando indicador: ${e}, pendientes: ${s}` ); const i = { success: { class: "bg-green-500 text-white", icon: "fa-check-circle", text: s > 0 ? `${s} pendientes` : "Sincronizado", autoHide: 0 === s }, error: { class: "bg-red-500 text-white", icon: "fa-exclamation-triangle", text: "Error de sincronizaci√≥n", autoHide: !1 }, syncing: { class: "bg-blue-500 text-white", icon: "fa-sync-alt fa-spin", text: "Sincronizando...", autoHide: !1 }, pending: { class: "bg-orange-500 text-white", icon: "fa-clock", text: `${s} cambios pendientes`, autoHide: !1 } }, o = i[ e ] || i.success; t.className = `fixed top-4 left-4 px-3 py-2 rounded-lg text-sm font-medium z-40 transition-all duration-300 ${o.class}`, n.className = `fas ${o.icon} mr-2`, a.textContent = o.text, t.classList.remove( "hidden" ), o.autoHide && setTimeout( ( () => { 0 === syncQueue.size && a.textContent === o.text && t.classList.add( "hidden" ) } ), 3e3 ) } function hideLoadingScreen() { const e = document.getElementById( "loadingScreen" ); e.style.opacity = "0", setTimeout( ( () => { e.style.display = "none" } ), 300 ) } function updateUI() { const e = document.getElementById( "loginBtn" ), t = document.getElementById( "userInfo" ), n = document.getElementById( "syncBtn" ), a = document.getElementById( "firebaseStatus" ); currentUser && !currentUser.isOffline ? ( e.classList.add( "hidden" ), t.classList.remove( "hidden" ), n && ( n.classList.remove( "hidden" ), n.disabled = !1, n.innerHTML = '<i class="fas fa-sync-alt mr-2"></i>Sincronizar', n.title = "Sincronizar tareas con la nube" ), a && a.classList.remove( "force-hidden" ), document.getElementById( "userName" ).textContent = currentUser.displayName || "Usuario", document.getElementById( "userEmail" ).textContent = currentUser.email, document.getElementById( "userPhoto" ).src = currentUser.photoURL || "https://via.placeholder.com/32" ) : ( e.classList.remove( "hidden" ), t.classList.add( "hidden" ), n && n.classList.add( "hidden" ), a && a.classList.add( "force-hidden" ) ) } function signInWithGoogle() { const e = new firebase.auth.GoogleAuthProvider; e.addScope( "profile" ), e.addScope( "email" ), auth.signInWithPopup( e ).then( ( e => { showNotification( "Sesi√≥n iniciada correctamente", "success" ), closeLoginModal() } ) ).catch( ( e => { console.error( "Error signing in:", e ), showNotification( "Error al iniciar sesi√≥n", "error" ) } ) ) } function signOut() { confirm( "¬øEst√°s seguro de que quieres cerrar sesi√≥n?" ) && ( cleanupUIOnLogout(), auth.signOut().then( ( () => { showNotification( "Sesi√≥n cerrada", "info" ) } ) ).catch( ( e => { console.error( "Error signing out:", e ) } ) ) ) } async function syncFromFirebase() { if ( currentUser && isOnline && !isSyncing ) { isSyncing = !0, updateSyncIndicator( "syncing" ); try { const e = db.collection( "users" ).doc( currentUser.uid ).collection( "tasks" ), t = await e.get(); if ( t.empty ) return console.log( "No hay tareas remotas para sincronizar" ), void updateSyncIndicator( "success" ); const n = {}; t.forEach( ( e => { const t = e.data(), a = t.date; n[ a ] || ( n[ a ] = [] ), n[ a ].push( { id: t.id, title: t.title, description: t.description || "", time: t.time || "", completed: t.completed || !1 } ) } ) ); let a = 0; Object.keys( n ).forEach( ( e => { tasks[ e ] || ( tasks[ e ] = [] ), n[ e ].forEach( ( t => { tasks[ e ].some( ( e => e.id === t.id || e.title === t.title && e.time === t.time ) ) || ( tasks[ e ].push( t ), a++ ) } ) ) } ) ), a > 0 && ( saveTasks(), renderCalendar(), updateProgress(), showNotification( `${a} tareas sincronizadas`, "success" ) ), updateSyncIndicator( "success" ), notificationsEnabled && "granted" === Notification.permission && ( stopNotificationService(), setTimeout( ( () => { startNotificationService() } ), 1e3 ) ) } catch ( e ) { console.error( "Error syncing from Firebase:", e ), updateSyncIndicator( "error" ), showNotification( "Error al sincronizar", "error" ) } finally { isSyncing = !1 } } } function forceSyncNow() { console.log( "üî• Forzando sincronizaci√≥n inmediata..." ), syncTimeout && ( clearTimeout( syncTimeout ), syncTimeout = null ), processSyncQueue() } function setupEventListeners() { const e = { taskForm: addTask, prevMonth: () => changeMonth( -1 ), nextMonth: () => changeMonth( 1 ), closeModal: closeModal, taskRepeat: toggleCustomDays, clearWeekBtn: clearWeek, clearMonthBtn: clearMonth, exportExcelBtn: exportToExcel, notificationsBtn: toggleNotifications, syncBtn: syncToFirebase, loginBtn: showLoginModal, logoutBtn: signOut, googleSignInBtn: signInWithGoogle, closeLoginModal: closeLoginModal, resetFormBtn: resetForm, clearAllBtn: clearAll }; Object.entries( e ).forEach( ( ( [ e, t ] ) => { const n = document.getElementById( e ); n && n.addEventListener( "FORM" === n.tagName ? "submit" : "click", t ) } ) ); const t = document.getElementById( "closePanelBtn" ), n = document.getElementById( "addQuickTaskBtn" ); t && t.addEventListener( "click", closeDailyTaskPanel ), n && n.addEventListener( "click", addQuickTaskToSelectedDay ); const a = document.getElementById( "repeatDuration" ), s = document.querySelectorAll( '#customDays input[type="checkbox"]' ), i = document.getElementById( "taskDate" ); a && a.addEventListener( "change", updateRepeatPreview ), i && i.addEventListener( "change", updateRepeatPreview ), s.forEach( ( e => { e.addEventListener( "change", updateRepeatPreview ) } ) ) } function resetForm() { const e = document.getElementById( "taskForm" ), t = document.getElementById( "advancedRepeatConfig" ), n = document.getElementById( "customDays" ), a = document.getElementById( "repeatDuration" ); e.reset(), t?.classList.add( "hidden" ), n?.classList.add( "hidden" ), a && ( a.value = "2" ); document.querySelectorAll( '#customDays input[type="checkbox"]' ).forEach( ( e => { e.checked = !1 } ) ), setupDateInput(), showNotification( "Formulario reiniciado", "info" ); const s = document.getElementById( "taskTime" ); s && ( s.addEventListener( "change", ( () => { setTimeout( ( () => { s.blur() } ), 100 ) } ) ), s.addEventListener( "keydown", ( e => { "Enter" === e.key && s.blur() } ) ) ), document.addEventListener( "change", ( e => { "time" === e.target.type && setTimeout( ( () => { e.target.blur() } ), 100 ) } ) ), document.addEventListener( "keydown", ( e => { "time" === e.target.type && "Enter" === e.key && e.target.blur() } ) ) } function showLoginModal() { document.getElementById( "loginModal" ).classList.remove( "hidden" ) } function closeLoginModal() { document.getElementById( "loginModal" ).classList.add( "hidden" ) } function loadTasks() { try { const e = localStorage.getItem( "tasks" ); tasks = e ? JSON.parse( e ) : {} } catch ( e ) { tasks = {}, console.warn( "Error loading tasks from localStorage:", e ) } } function toggleCustomDays() { const e = document.getElementById( "taskRepeat" ), t = document.getElementById( "advancedRepeatConfig" ), n = document.getElementById( "customDays" ); "none" === e.value ? t?.classList.add( "hidden" ) : ( t?.classList.remove( "hidden" ), n?.classList.toggle( "hidden", "custom" !== e.value ), updateRepeatPreview() ) } function updateRepeatPreview() { const e = document.getElementById( "taskRepeat" ).value, t = document.getElementById( "repeatDuration" ).value, n = document.getElementById( "previewText" ), a = document.getElementById( "taskDate" ).value; if ( !n || "none" === e ) return; const s = { 1: "lo que resta del mes actual", 2: "lo que resta del mes actual y todo el mes siguiente", 3: "los pr√≥ximos 3 meses", 6: "los pr√≥ximos 6 meses", 12: "el pr√≥ximo a√±o" }; let i = `Se crear√° ${{ daily: "todos los d√≠as", weekdays: "d√≠as de semana (Lun-Vie)", weekends: "fines de semana (S√°b-Dom)", weekly: "cada semana (mismo d√≠a)", custom: "d√≠as personalizados" }[ e ]} durante ${s[ t ]}`; if ( "custom" === e ) { const e = Array.from( document.querySelectorAll( "#customDays input:checked" ) ); if ( e.length > 0 ) { const n = [ "Dom", "Lun", "Mar", "Mi√©", "Jue", "Vie", "S√°b" ]; i = `Se crear√° los ${e.map( ( e => n[ parseInt( e.value ) ] ) ).join( ", " )} durante ${s[ t ]}` } else i = "Selecciona al menos un d√≠a" } const o = calculateExactTaskCount( e, parseInt( t ), a ); o > 0 && ( i += ` (~${o} tareas)` ), n.textContent = i } function calculateExactTaskCount( e, t, n ) { const a = n ? new Date( n + "T00:00:00" ) : new Date; let s; 1 === t ? s = new Date( a.getFullYear(), a.getMonth() + 1, 0 ) : ( s = new Date( a ), s.setMonth( s.getMonth() + t ), s = new Date( s.getFullYear(), s.getMonth(), 0 ) ); let i = 0, o = new Date( a ), r = []; if ( "custom" === e && ( r = Array.from( document.querySelectorAll( "#customDays input:checked" ) ).map( ( e => parseInt( e.value ) ) ), 0 === r.length ) ) return 0; for ( ; o <= s; ) { const t = o.getDay(); let n = !1; switch ( e ) { case "daily": n = !0; break; case "weekdays": n = t >= 1 && t <= 5; break; case "weekends": n = 0 === t || 6 === t; break; case "weekly": n = t === a.getDay(); break; case "custom": n = r.includes( t ) }const s = o.toISOString().split( "T" )[ 0 ]; n && !isDatePast( s ) && i++, o.setDate( o.getDate() + 1 ) } return i } function addTask( e ) { e.preventDefault(); const t = { title: document.getElementById( "taskTitle" ).value.trim(), description: document.getElementById( "taskDescription" ).value.trim(), date: document.getElementById( "taskDate" ).value, time: document.getElementById( "taskTime" ).value, repeat: document.getElementById( "taskRepeat" ).value, priority: parseInt( document.getElementById( "taskPriority" ).value ) || 3, initialState: document.getElementById( "taskInitialState" )?.value || "pending" }; if ( !t.title ) return; if ( t.date && isDatePast( t.date ) ) return void showNotification( "No puedes agregar tareas a fechas anteriores. Por favor selecciona hoy o una fecha futura.", "error" ); const n = { id: Date.now().toString(), title: t.title, description: t.description, time: t.time, priority: t.priority, state: t.initialState, completed: "completed" === t.initialState }; if ( t.date && "none" === t.repeat ) addTaskToDate( t.date, n ), enqueueSync( "upsert", t.date, n ), addToChangeLog( "created", n.title, t.date ); else if ( "none" !== t.repeat ) { const e = t.date ? new Date( t.date + "T00:00:00" ) : new Date; addRecurringTasks( n, t.repeat, e ) } saveTasks(), renderCalendar(), updateProgress(), document.getElementById( "taskForm" ).reset(), setupDateInput(), showNotification( "Tarea agregada exitosamente" ); const a = document.getElementById( "advancedRepeatConfig" ), s = document.getElementById( "customDays" ), i = document.getElementById( "repeatDuration" ); a?.classList.add( "hidden" ), s?.classList.add( "hidden" ), i && ( i.value = "2" ); const o = document.getElementById( "taskPriority" ), r = document.getElementById( "taskInitialState" ); o && ( o.value = "3" ), r && ( r.value = "pending" ) } function addTaskToDate( e, t ) { tasks[ e ] || ( tasks[ e ] = [] ); const n = { ...t, id: `${e}-${Date.now()}` }; if ( tasks[ e ].push( n ), selectedDateForPanel === e ) { showDailyTaskPanel( e, new Date( e + "T12:00:00" ).getDate() ) } return n } function addRecurringTasks( e, t, n ) { const a = document.getElementById( "repeatDuration" ), s = a ? parseInt( a.value ) : 2; let i, o = new Date( n ), r = 0; 1 === s ? i = new Date( n.getFullYear(), n.getMonth() + 1, 0 ) : ( i = new Date( n ), i.setMonth( i.getMonth() + s ), i = new Date( i.getFullYear(), i.getMonth(), 0 ) ); let l = []; "custom" === t && ( l = Array.from( document.querySelectorAll( "#customDays input:checked" ) ).map( ( e => parseInt( e.value ) ) ) ); const c = []; for ( ; o <= i; ) { const a = o.toISOString().split( "T" )[ 0 ], s = o.getDay(); let i = !1; switch ( t ) { case "daily": i = !0; break; case "weekdays": i = s >= 1 && s <= 5; break; case "weekends": i = 0 === s || 6 === s; break; case "weekly": i = s === n.getDay(); break; case "custom": i = l.includes( s ) && l.length > 0 }if ( i && !isDatePast( a ) ) { const t = addTaskToDate( a, e ); c.push( { dateStr: a, task: t } ), r++ } o.setDate( o.getDate() + 1 ) } c.forEach( ( ( { dateStr: e, task: t } ) => { enqueueSync( "upsert", e, t ) } ) ); showNotification( `${r} tareas agregadas para ${{ 1: "lo que resta del mes actual", 2: "lo que resta del mes actual y todo el mes siguiente", 3: "los pr√≥ximos 3 meses", 6: "los pr√≥ximos 6 meses", 12: "el pr√≥ximo a√±o" }[ s.toString() ] || `${s} meses`}`, "success" ) } function renderCalendar() { const e = document.getElementById( "calendar" ), t = document.getElementById( "currentMonth" ); if ( !e || !t ) return; e.innerHTML = "", t.textContent = currentDate.toLocaleDateString( "es-ES", { month: "long", year: "numeric" } ).replace( /^\w/, ( e => e.toUpperCase() ) );[ "Dom", "Lun", "Mar", "Mi√©", "Jue", "Vie", "S√°b" ].forEach( ( t => { const n = document.createElement( "div" ); n.className = "text-center font-semibold text-gray-600 py-2", n.textContent = t, e.appendChild( n ) } ) ); const n = new Date( currentDate.getFullYear(), currentDate.getMonth(), 1 ), a = new Date( currentDate.getFullYear(), currentDate.getMonth() + 1, 0 ).getDate(), s = n.getDay(); for ( let t = 0; t < s; t++ ) { const t = document.createElement( "div" ); t.className = "h-24 border border-gray-200", e.appendChild( t ) } for ( let t = 1; t <= a; t++ ) { const n = new Date( currentDate.getFullYear(), currentDate.getMonth(), t ).toISOString().split( "T" )[ 0 ], a = tasks[ n ] || []; e.appendChild( createDayElement( t, n, a ) ) } } function createDayElement( e, t, n ) { const a = document.createElement( "div" ), s = getTodayString(), i = t === s, o = isDatePast( t ); return a.className = `h-24 border border-gray-200 p-1 cursor-pointer hover:bg-blue-50 transition relative calendar-day group ${i ? "bg-blue-100 border-blue-300 ring-2 ring-blue-200" : ""} ${o ? "opacity-75" : ""}`, a.dataset.date = t, a.innerHTML = `\n        <div class="font-semibold text-sm mb-1 ${i ? "text-blue-700" : ""}">${e}</div>\n        <div class="space-y-1">\n            ${n.slice( 0, 2 ).map( ( e => createTaskElement( e, t ) ) ).join( "" )}\n            ${n.length > 2 ? `\n                <div class="text-xs text-gray-500 cursor-pointer hover:text-blue-600 transition-colors" \n                     onclick="showDailyTaskPanel('${t}', ${e})">\n                    +${n.length - 2} m√°s\n                </div>\n            ` : ""}\n        </div>\n        ${o ? "" : `\n            <button onclick="event.stopPropagation(); showQuickAddTask('${t}')"\n                    class="absolute bottom-1 right-1 w-6 h-6 bg-green-500 text-white rounded-full text-xs opacity-0 group-hover:opacity-100 transition-opacity duration-200 hover:bg-green-600 flex items-center justify-center"\n                    title="Agregar tarea r√°pida">\n                <i class="fas fa-plus"></i>\n            </button>\n        `}\n    `, a.addEventListener( "click", ( n => { n.target.closest( ".task-item" ) || n.target.closest( "button" ) || showDailyTaskPanel( t, e ) } ) ), a } function updatePanelDateHeader( e, t, n ) { const a = document.getElementById( "panelDate" ), s = document.getElementById( "panelActionButtons" ), i = new Date( e + "T12:00:00" ), o = dailyTaskLogs[ e ] || []; a.innerHTML = `\n        <i class="fas fa-tasks text-indigo-600 mr-2"></i>\n        Tareas del ${i.toLocaleDateString( "es-ES", { weekday: "long", year: "numeric", month: "long", day: "numeric" } )}\n    `; s.querySelectorAll( "button:not(#closePanelBtn)" ).forEach( ( e => e.remove() ) ); const r = document.createElement( "div" ); if ( r.className = "flex items-center space-x-2", n.length > 0 ) { const t = document.createElement( "button" ); t.onclick = () => clearDayTasks( e ), t.className = "flex items-center space-x-1 text-red-600 hover:text-red-700 text-sm px-2 py-1 rounded hover:bg-red-50 transition", t.title = "Eliminar todas las tareas del d√≠a", t.innerHTML = '\n            <i class="fas fa-trash-alt"></i>\n            <span class="hidden sm:inline">Limpiar D√≠a</span>\n        ', r.appendChild( t ) } const l = document.createElement( "button" ); l.onclick = () => showDayChangeLog( e ), l.className = "flex items-center space-x-1 text-purple-600 hover:text-purple-700 text-sm px-2 py-1 rounded hover:bg-purple-50 transition", l.title = "Ver registro de cambios del d√≠a", l.innerHTML = `\n        <i class="fas fa-history"></i>\n        <span class="hidden sm:inline">Registro</span>\n        ${o.length > 0 ? `<span class="bg-purple-100 text-purple-700 text-xs px-1.5 py-0.5 rounded-full ml-1">${o.length}</span>` : ""}\n    `, r.appendChild( l ); const c = document.getElementById( "closePanelBtn" ); s.insertBefore( r, c ) } function showDailyTaskPanel( e, t ) { const n = document.getElementById( "dailyTaskPanel" ), a = document.getElementById( "panelDate" ), s = document.getElementById( "panelTaskList" ); if ( !n || !a || !s ) return; selectedDateForPanel = e; const i = tasks[ e ] || [], o = ( new Date( e + "T12:00:00" ), isDatePast( e ) ); if ( updatePanelDateHeader( e, t, i ), 0 === i.length ) s.innerHTML = `\n            <div class="text-center py-8 text-gray-500">\n                <i class="fas fa-calendar-plus text-4xl mb-3 opacity-50"></i>\n                <p>No hay tareas para este d√≠a</p>\n                ${o ? "" : '<p class="text-sm mt-2">¬°Agrega tu primera tarea!</p>'}\n            </div>\n        `; else { const t = sortTasksByPriority( i ); s.innerHTML = t.map( ( t => createPanelTaskElement( t, e ) ) ).join( "" ) } updatePanelProgress( i ); const r = document.getElementById( "addQuickTaskBtn" ); r && ( r.style.display = o ? "none" : "flex" ), n.classList.remove( "hidden" ), window.innerWidth < 768 && setTimeout( ( () => { n.scrollIntoView( { behavior: "smooth", block: "start" } ) } ), 100 ) } function sortTasksByPriority( e ) { return e.sort( ( ( e, t ) => e.priority !== t.priority ? e.priority - t.priority : e.time && t.time ? e.time.localeCompare( t.time ) : e.time && !t.time ? -1 : !e.time && t.time ? 1 : e.title.localeCompare( t.title ) ) ) } function createPanelTaskElement( e, t ) { const n = isDatePast( t ), a = PRIORITY_LEVELS[ e.priority ] || PRIORITY_LEVELS[ 3 ], s = TASK_STATES[ e.state ] || TASK_STATES.pending, i = "inProgress" === e.state, o = "paused" === e.state; return `\n        <div class="panel-task-item bg-white rounded-lg shadow-md p-4 mb-4 border-l-4 transition-all duration-300 hover:shadow-lg hover:-translate-y-0.5" \n             style="border-left-color: ${a.color}" \n             data-priority="${e.priority}">\n            <div class="flex sm:items-center sm:justify-between">\n                <div class="flex-1 sm:flex sm:items-start sm:space-x-3">\n                    \x3c!-- Select de estado y prioridad --\x3e\n                    <div class="flex flex-col space-y-2 mb-3 sm:mb-0">\n                        ${n ? `\n                            <div class="text-xs p-2 rounded-lg ${s.class} font-medium">\n                                <i class="fas ${s.icon}"></i> ${s.label}\n                            </div>\n                        ` : `\n                            <select onchange="changeTaskStateDirect('${t}', '${e.id}', this.value)" \n                                    class="text-xs p-2 rounded-lg border ${s.class} font-medium cursor-pointer transition-colors duration-200"\n                                    title="Cambiar estado de la tarea">\n                                <option value="pending" ${"pending" === e.state ? "selected" : ""}>‚è∏ Pendiente</option>\n                                <option value="inProgress" ${"inProgress" === e.state ? "selected" : ""}>‚ñ∂ En Proceso</option>\n                                <option value="paused" ${"paused" === e.state ? "selected" : ""}>‚è∏ Pausada</option>\n                                <option value="completed" ${"completed" === e.state ? "selected" : ""}>‚úì Completada</option>\n                            </select>\n                        `}\n                        <div class="flex items-center space-x-2">\n                            <span class="task-priority-dot inline-block w-3 h-3 rounded-full shadow-sm" \n                                  style="background-color: ${a.color}" \n                                  title="Prioridad: ${a.label}"></span>\n                            <span class="text-xs text-gray-600 font-medium">${a.label}</span>\n                        </div>\n                    </div>\n                    \n                    \x3c!-- Informaci√≥n de la tarea --\x3e\n                    <div class="flex-1">\n                        <div class="task-title font-semibold text-base ${"completed" === e.state ? "line-through text-gray-500" : "text-gray-800"}">${e.title}</div>\n                        ${e.description ? `<div class="task-description text-sm text-gray-600 mt-1">${e.description}</div>` : '<div class="task-description text-sm text-gray-400 mt-1 italic">Sin descripci√≥n</div>'}\n                        <div class="task-meta flex flex-wrap items-center gap-3 mt-2 text-xs">\n                            ${e.time ? `<div class="text-indigo-600"><i class="far fa-clock mr-1"></i>${e.time}</div>` : ""}\n                            <div class="text-gray-500">${s.label}</div>\n                        </div>\n                    </div>\n                </div>\n                \n                \x3c!-- Botones de acci√≥n: Verticales en m√≥vil, horizontales en desktop --\x3e\n                ${n ? "" : `\n                    <div class="task-actions flex flex-col space-y-1 ml-4 sm:flex-row sm:items-center sm:space-y-0 sm:space-x-1 sm:ml-0">\n                        ${i ? `\n                            <button onclick="pauseTask('${t}', '${e.id}')"\n                                    class="flex items-center space-x-1 bg-orange-100 text-orange-700 px-3 py-2 rounded-lg hover:bg-orange-200 transition-colors duration-200 text-xs font-medium shadow-sm"\n                                    title="Pausar tarea activa">\n                                <i class="fas fa-pause"></i>\n                                <span>Pausar</span>\n                            </button>\n                        ` : ""}\n                        ${o ? `\n                            <button onclick="resumeTask('${t}', '${e.id}')"\n                                    class="flex items-center space-x-1 bg-blue-100 text-blue-700 px-3 py-2 rounded-lg hover:bg-blue-200 transition-colors duration-200 text-xs font-medium shadow-sm"\n                                    title="Reanudar tarea pausada">\n                                <i class="fas fa-play"></i>\n                                <span>Reanudar</span>\n                            </button>\n                        ` : ""}\n                        <button onclick="showAdvancedEditModal('${t}', '${e.id}')"\n                                class="text-blue-500 hover:text-blue-700 p-2 rounded-lg hover:bg-blue-50 transition-colors duration-200"\n                                title="Editar t√≠tulo, descripci√≥n, hora y prioridad">\n                            <i class="fas fa-edit text-sm"></i>\n                        </button>\n                        <button onclick="showDayChangeLog('${t}')"\n                                class="text-purple-500 hover:text-purple-700 p-2 rounded-lg hover:bg-purple-50 transition-colors duration-200"\n                                title="Ver registro de cambios del d√≠a">\n                            <i class="fas fa-history text-sm"></i>\n                        </button>\n                        <button onclick="deleteTaskFromPanel('${t}', '${e.id}')"\n                                class="text-red-500 hover:text-red-700 p-2 rounded-lg hover:bg-red-50 transition-colors duration-200"\n                                title="Eliminar tarea permanentemente">\n                            <i class="fas fa-trash text-sm"></i>\n                        </button>\n                    </div>\n                `}\n            </div>\n        </div>\n    ` } function pauseTask( e, t ) { const n = tasks[ e ]?.find( ( e => e.id === t ) ); if ( !n || "inProgress" !== n.state ) return void showNotification( "Solo se pueden pausar tareas en proceso", "error" ); const a = n.state; if ( n.state = "paused", n.completed = !1, addToChangeLog( "paused", n.title, e, a, "paused", t ), saveTasks(), renderCalendar(), updateProgress(), enqueueSync( "upsert", e, n ), selectedDateForPanel === e ) { showDailyTaskPanel( e, new Date( e + "T12:00:00" ).getDate() ) } showNotification( "Tarea pausada", "info" ) } function resumeTask( e, t ) { const n = tasks[ e ]?.find( ( e => e.id === t ) ); if ( !n || "paused" !== n.state ) return void showNotification( "Solo se pueden reanudar tareas pausadas", "error" ); const a = n.state; if ( n.state = "inProgress", n.completed = !1, addToChangeLog( "resumed", n.title, e, a, "inProgress", t ), saveTasks(), renderCalendar(), updateProgress(), enqueueSync( "upsert", e, n ), selectedDateForPanel === e ) { showDailyTaskPanel( e, new Date( e + "T12:00:00" ).getDate() ) } showNotification( "Tarea reanudada", "success" ) } function showDeletedTasksModal() { closeAllModals(); const e = JSON.parse( localStorage.getItem( "deletedTasks" ) || "[]" ), t = document.createElement( "div" ); t.id = "deletedTasksModal", t.className = "fixed inset-0 bg-black bg-opacity-50 z-50 flex items-center justify-center p-4", t.innerHTML = `\n        <div class="bg-white rounded-xl shadow-2xl max-w-2xl w-full max-h-[80vh] overflow-hidden">\n            <div class="sticky top-0 bg-white border-b p-6 flex justify-between items-center">\n                <h3 class="text-lg font-semibold text-gray-800">\n                    <i class="fas fa-trash text-red-500 mr-2"></i>Tareas Eliminadas\n                </h3>\n                <button onclick="closeAllModals()" class="text-gray-500 hover:text-gray-700 transition">\n                    <i class="fas fa-times"></i>\n                </button>\n            </div>\n            <div class="p-6 overflow-y-auto max-h-96">\n                ${0 === e.length ? '\n                    <div class="text-center py-8 text-gray-500">\n                        <i class="fas fa-check-circle text-4xl mb-3 opacity-50"></i>\n                        <p>No hay tareas eliminadas</p>\n                    </div>\n                ' : `\n                    <div class="space-y-3">\n                        ${e.map( ( ( e, t ) => `\n                            <div class="bg-red-50 rounded-lg p-3 border-l-4 border-red-500">\n                                <div class="flex justify-between items-start">\n                                    <div class="flex-1">\n                                        <div class="font-medium text-sm text-gray-800">\n                                            <i class="fas fa-trash text-red-600 mr-1"></i>\n                                            "${e.title}"\n                                        </div>\n                                        <div class="text-xs text-gray-500 mt-1">\n                                            Fecha: ${e.date} ‚Ä¢ Eliminada: ${e.formattedDeleteTime}\n                                        </div>\n                                        <div class="text-xs text-red-600 mt-1">\n                                            ID: ${e.id}\n                                        </div>\n                                    </div>\n                                </div>\n                            </div>\n                        ` ) ).join( "" )}\n                    </div>\n                `}\n                <div class="mt-6 flex justify-end space-x-3">\n                    ${e.length > 0 ? '\n                        <button onclick="clearDeletedTasks()" class="bg-red-500 text-white px-4 py-2 rounded-lg hover:bg-red-600 transition">\n                            <i class="fas fa-eraser mr-2"></i>Limpiar Lista\n                        </button>\n                    ' : ""}\n                    <button onclick="closeAllModals()" class="bg-gray-300 text-gray-700 px-4 py-2 rounded-lg hover:bg-gray-400 transition">\n                        Cerrar\n                    </button>\n                </div>\n            </div>\n        </div>\n    `, document.body.appendChild( t ) } function clearDeletedTasks() { confirm( "¬øEst√°s seguro de que quieres limpiar la lista de tareas eliminadas?" ) && ( localStorage.removeItem( "deletedTasks" ), showNotification( "Lista de tareas eliminadas limpiada", "success" ), closeAllModals() ) } function clearDayTasks( e ) { const t = tasks[ e ] || []; if ( 0 === t.length ) return void showNotification( "No hay tareas para eliminar en este d√≠a", "info" ); const n = new Date( e + "T12:00:00" ).toLocaleDateString( "es-ES", { weekday: "long", day: "numeric", month: "long" } ); if ( !confirm( `¬øEst√°s seguro de que quieres eliminar todas las ${t.length} tareas del ${n}?` ) ) return; t.forEach( ( t => { addToChangeLog( "deleted", t.title, e, null, null, t.id ) } ) ); const a = [ ...t ]; delete tasks[ e ], a.forEach( ( t => { enqueueSync( "delete", e, { id: t.id } ) } ) ), saveTasks(), renderCalendar(), updateProgress(), closeDailyTaskPanel(), showNotification( `${a.length} tareas eliminadas del ${n}`, "success" ) } function createTaskElement( e, t ) { const n = PRIORITY_LEVELS[ e.priority ] || PRIORITY_LEVELS[ 3 ], a = TASK_STATES[ e.state ] || TASK_STATES.pending; return `\n        <div class="task-item-wrapper relative group/task">\n            <div class="text-xs p-1 rounded ${a.class} truncate task-item cursor-move pr-8 border-l-4" \n                 data-task-id="${e.id}"\n                 data-date="${t}"\n                 draggable="true"\n                 style="border-left-color: ${n.color}"\n                 title="${e.title}${e.time ? " - " + e.time : ""} | ${a.label} | ${n.label}">\n                <i class="fas ${a.icon} mr-1 opacity-75"></i>\n                ${e.title}\n                ${e.time ? `<span class="text-xs opacity-75 ml-1">${e.time}</span>` : ""}\n            </div>\n            <div class="absolute right-0 top-0 h-full flex items-center opacity-0 group-hover/task:opacity-100 transition-opacity duration-200 bg-gradient-to-l from-white via-white to-transparent pl-2">\n                <button onclick="event.stopPropagation(); quickEditTaskAdvanced('${t}', '${e.id}')"\n                        class="text-blue-500 hover:text-blue-700 text-xs p-1 rounded hover:bg-blue-100"\n                        title="Editar tarea completa">\n                    <i class="fas fa-edit"></i>\n                </button>\n                <button onclick="event.stopPropagation(); quickDeleteTask('${t}', '${e.id}')"\n                        class="text-red-500 hover:text-red-700 text-xs p-1 rounded hover:bg-red-100 ml-1"\n                        title="Eliminar tarea permanentemente">\n                    <i class="fas fa-trash"></i>\n                </button>\n            </div>\n        </div>\n    ` } function updatePanelProgress( e ) { const t = document.getElementById( "panelProgressBar" ), n = document.getElementById( "panelProgressText" ); if ( !t || !n ) return; const a = e.filter( ( e => "completed" === e.state ) ).length, s = e.filter( ( e => "inProgress" === e.state ) ).length, i = e.filter( ( e => "paused" === e.state ) ).length, o = e.filter( ( e => "pending" === e.state ) ).length, r = 0 === e.length ? 0 : Math.round( a / e.length * 100 ); t.style.width = `${r}%`, n.innerHTML = `\n        ${r}% | \n        <span class="text-green-600">${a} ‚úì</span> \n        <span class="text-blue-600">${s} ‚ñ∂</span> \n        <span class="text-orange-600">${i} ‚è∏</span>\n        <span class="text-gray-600">${o} ‚è∏</span>\n    ` } function toggleTaskFromPanel( e, t ) { const n = tasks[ e ]?.find( ( e => e.id === t ) ); if ( n && ( n.completed = !n.completed, n.completed && clearTaskNotifications( t ), saveTasks(), renderCalendar(), updateProgress(), enqueueSync( "upsert", e, n ), selectedDateForPanel === e ) ) { updatePanelProgress( tasks[ e ] || [] ); const a = document.querySelector( `input[onchange="toggleTaskFromPanel('${e}', '${t}')"]` ); if ( a ) { const e = a.closest( "div.border" ); if ( e ) { e.className = e.className.replace( n.completed ? "bg-gray-50 border-gray-200" : "bg-green-50 border-green-200", n.completed ? "bg-green-50 border-green-200" : "bg-gray-50 border-gray-200" ); const t = e.querySelector( ".font-medium" ); t && ( t.className = "font-medium " + ( n.completed ? "line-through text-green-600" : "text-gray-800" ) ) } } } } function deleteTaskFromPanel( e, t ) { const n = tasks[ e ]?.find( ( e => e.id === t ) ); if ( n && confirm( `¬øEliminar la tarea "${n.title}"?` ) && ( deleteTaskWithUndoImproved( e, t ), selectedDateForPanel === e ) ) { showDailyTaskPanel( e, new Date( e + "T12:00:00" ).getDate() ) } } function toggleTaskState( e, t ) { const n = tasks[ e ]?.find( ( e => e.id === t ) ); if ( !n ) return; const a = n.state || "pending"; let s; if ( "inProgress" === a ) s = "paused"; else if ( "paused" === a ) s = "inProgress"; else { const e = [ "pending", "inProgress", "completed" ], t = e.indexOf( a ); s = e[ ( t + 1 ) % e.length ] } if ( n.state = s, n.completed = "completed" === n.state, addToChangeLog( "stateChanged", n.title, e, a, s ), "completed" === n.state && clearTaskNotifications( t ), saveTasks(), renderCalendar(), updateProgress(), enqueueSync( "upsert", e, n ), selectedDateForPanel === e ) { showDailyTaskPanel( e, new Date( e + "T12:00:00" ).getDate() ) } showNotification( `Tarea cambiada a: ${TASK_STATES[ n.state ].label}`, "success" ) } function showAdvancedEditModal( e, t ) { const n = tasks[ e ]?.find( ( e => e.id === t ) ); if ( !n ) return void showNotification( "Tarea no encontrada", "error" ); if ( isDatePast( e ) ) return void showNotification( "No puedes editar tareas de fechas pasadas", "error" ); closeAllModals(); const a = document.createElement( "div" ); a.id = "advancedEditModal", a.className = "fixed inset-0 bg-black bg-opacity-50 z-50 flex items-center justify-center p-4", a.innerHTML = `\n        <div class="bg-white rounded-xl shadow-2xl max-w-md w-full p-6 max-h-[90vh] overflow-y-auto">\n            <div class="flex justify-between items-center mb-4">\n                <h3 class="text-lg font-semibold text-gray-800">\n                    <i class="fas fa-edit text-blue-500 mr-2"></i>Editar Tarea\n                </h3>\n                <button onclick="closeAllModals()" class="text-gray-500 hover:text-gray-700 transition">\n                    <i class="fas fa-times"></i>\n                </button>\n            </div>\n            <form id="advancedEditTaskForm" class="space-y-4">\n                <div>\n                    <label class="block text-sm font-medium text-gray-700 mb-2">T√≠tulo <span class="text-red-500">*</span></label>\n                    <input type="text" id="advancedEditTaskTitle" value="${n.title || ""}" required \n                           class="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500">\n                </div>\n                <div>\n                    <label class="block text-sm font-medium text-gray-700 mb-2">Descripci√≥n</label>\n                    <textarea id="advancedEditTaskDescription" rows="3" \n                              class="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500">${n.description || ""}</textarea>\n                </div>\n                <div class="grid grid-cols-2 gap-4">\n                    <div>\n                        <label class="block text-sm font-medium text-gray-700 mb-2">Hora <span class="text-red-500">*</span></label>\n                        <input type="time" id="advancedEditTaskTime" value="${n.time || ""}" required\n                               class="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500">\n                    </div>\n                    <div>\n                        <label class="block text-sm font-medium text-gray-700 mb-2">Prioridad <span class="text-red-500">*</span></label>\n                        <select id="advancedEditTaskPriority" required class="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500">\n                            <option value="" disabled>Selecciona una prioridad</option>\n                            <option value="1" ${1 === n.priority ? "selected" : ""}>üî¥ Muy Importante</option>\n                            <option value="2" ${2 === n.priority ? "selected" : ""}>üü† Importante</option>\n                            <option value="3" ${3 === n.priority ? "selected" : ""}>üîµ Moderado</option>\n                            <option value="4" ${4 === n.priority ? "selected" : ""}>‚ö´ No Prioritario</option>\n                        </select>\n                    </div>\n                </div>\n                <div class="bg-blue-50 p-3 rounded-lg">\n                    <p class="text-sm text-blue-700">\n                        <i class="fas fa-info-circle mr-1"></i>\n                        Estado actual: <strong>${TASK_STATES[ n.state ].label}</strong>\n                        <br>\n                        <span class="text-xs">Usa los controles en el panel principal para cambiar el estado.</span>\n                    </p>\n                </div>\n                <div class="flex space-x-3 pt-4 border-t">\n                    <button type="submit" class="flex-1 bg-blue-600 text-white py-2 px-4 rounded-lg hover:bg-blue-700 transition">\n                        <i class="fas fa-save mr-2"></i>Guardar Cambios\n                    </button>\n                    <button type="button" onclick="closeAllModals()" \n                            class="flex-1 bg-gray-300 text-gray-700 py-2 px-4 rounded-lg hover:bg-gray-400 transition">\n                        Cancelar\n                    </button>\n                </div>\n            </form>\n        </div>\n    `, document.body.appendChild( a ), document.getElementById( "advancedEditTaskForm" ).addEventListener( "submit", ( n => { n.preventDefault(), updateAdvancedTaskFromPanelImproved( e, t ) } ) ) } function canMoveTask( e ) { return e.priority > 2 } function changeTaskStateDirect( e, t, n ) { const a = tasks[ e ]?.find( ( e => e.id === t ) ); if ( !a ) return; const s = a.state || "pending"; if ( s === n ) return; if ( "completed" === s && "completed" !== n && !confirm( "¬øEst√°s seguro de que quieres cambiar una tarea completada?" ) ) { const e = document.querySelector( `select[onchange*="${t}"]` ); return void ( e && ( e.value = s ) ) } a.state = n, a.completed = "completed" === a.state; let i = "stateChanged"; if ( "inProgress" === s && "paused" === n ? i = "paused" : "paused" === s && "inProgress" === n && ( i = "resumed" ), addToChangeLog( i, a.title, e, s, n, t ), "completed" === a.state && clearTaskNotifications( t ), saveTasks(), renderCalendar(), updateProgress(), enqueueSync( "upsert", e, a ), selectedDateForPanel === e ) { showDailyTaskPanel( e, new Date( e + "T12:00:00" ).getDate() ) } showNotification( `Tarea cambiada a: ${TASK_STATES[ a.state ].label}`, "success" ) } function updateAdvancedTaskFromPanelImproved( e, t ) { const n = document.getElementById( "advancedEditTaskTitle" ).value.trim(), a = document.getElementById( "advancedEditTaskDescription" ).value.trim(), s = document.getElementById( "advancedEditTaskTime" ).value, i = parseInt( document.getElementById( "advancedEditTaskPriority" ).value ); if ( !n || !s || !i ) return void showNotification( "Por favor completa todos los campos obligatorios", "error" ); if ( !tasks[ e ] ) return void showNotification( "Error: No se encontr√≥ la fecha de la tarea", "error" ); const o = tasks[ e ].findIndex( ( e => e.id === t ) ); if ( -1 === o ) return void showNotification( "Error: No se encontr√≥ la tarea", "error" ); tasks[ e ][ o ]; const r = { ...tasks[ e ][ o ], title: n, description: a, time: s, priority: i }; if ( tasks[ e ][ o ] = r, addToChangeLog( "edited", n, e, null, null, t ), saveTasks(), renderCalendar(), updateProgress(), enqueueSync( "upsert", e, r ), closeAllModals(), showNotification( "Tarea actualizada exitosamente", "success" ), selectedDateForPanel === e ) { showDailyTaskPanel( e, new Date( e + "T12:00:00" ).getDate() ) } } function quickEditTaskAdvanced( e, t ) { const n = tasks[ e ]?.find( ( e => e.id === t ) ); if ( !n ) return void showNotification( "Tarea no encontrada", "error" ); if ( isDatePast( e ) ) return void showNotification( "No puedes editar tareas de fechas pasadas", "error" ); closeAllModals(); const a = document.createElement( "div" ); a.id = "quickEditModal", a.className = "fixed inset-0 bg-black bg-opacity-50 z-50 flex items-center justify-center p-4", a.innerHTML = `\n        <div class="bg-white rounded-lg p-4 max-w-sm w-full">\n            <h4 class="font-medium mb-3"><i class="fas fa-edit text-blue-500 mr-2"></i>Edici√≥n R√°pida</h4>\n            <form id="quickEditForm" class="space-y-3">\n                <div>\n                    <label class="block text-sm font-medium text-gray-700 mb-2">T√≠tulo <span class="text-red-500">*</span></label>\n                    <input type="text" id="quickEditTitle" value="${n.title}" required\n                           class="w-full px-3 py-2 border rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500">\n                </div>\n                <div>\n                    <label class="block text-sm font-medium text-gray-700 mb-2">Descripci√≥n</label>\n                    <textarea id="quickEditDescription" rows="3" \n                              class="w-full px-3 py-2 border rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500">${n.description || ""}</textarea>\n                </div>\n                <div>\n                    <label class="block text-sm font-medium text-gray-700 mb-2">Hora <span class="text-red-500">*</span></label>\n                    <input type="time" id="quickEditTime" value="${n.time || ""}" required\n                           class="w-full px-3 py-2 border rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500">\n                </div>\n                <div>\n                    <label class="block text-sm font-medium text-gray-700 mb-2">Prioridad <span class="text-red-500">*</span></label>\n                    <select id="quickEditPriority" required class="w-full px-3 py-2 border rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500">\n                        <option value="" disabled>Selecciona una prioridad</option>\n                        <option value="1" ${1 === n.priority ? "selected" : ""}>üî¥ Muy Importante</option>\n                        <option value="2" ${2 === n.priority ? "selected" : ""}>üü† Importante</option>\n                        <option value="3" ${3 === n.priority ? "selected" : ""}>üîµ Moderado</option>\n                        <option value="4" ${4 === n.priority ? "selected" : ""}>‚ö´ No Prioritario</option>\n                    </select>\n                </div>\n                <div class="flex space-x-2">\n                    <button type="submit" class="flex-1 bg-blue-500 text-white py-2 rounded-lg hover:bg-blue-700 transition">\n                        <i class="fas fa-save mr-2"></i>Guardar\n                    </button>\n                    <button type="button" onclick="closeAllModals()" \n                            class="flex-1 bg-gray-300 text-gray-700 py-2 rounded-lg hover:bg-gray-400 transition">\n                        Cancelar\n                    </button>\n                </div>\n            </form>\n        </div>\n    `, document.body.appendChild( a ), document.getElementById( "quickEditForm" ).addEventListener( "submit", ( n => { n.preventDefault(), saveQuickEditImproved( e, t ) } ) ) } function saveQuickEditImproved( e, t ) { const n = tasks[ e ]?.find( ( e => e.id === t ) ); if ( !n ) return void showNotification( "Error: No se encontr√≥ la tarea", "error" ); const a = document.getElementById( "quickEditTitle" ).value.trim(), s = document.getElementById( "quickEditDescription" ).value.trim(), i = document.getElementById( "quickEditTime" ).value, o = parseInt( document.getElementById( "quickEditPriority" ).value ); if ( a && i && o ) { if ( n.title = a, n.description = s, n.time = i, n.priority = o, saveTasks(), renderCalendar(), updateProgress(), enqueueSync( "upsert", e, n ), closeAllModals(), showNotification( "Tarea actualizada exitosamente", "success" ), selectedDateForPanel === e ) { showDailyTaskPanel( e, new Date( e + "T12:00:00" ).getDate() ) } } else showNotification( "Por favor completa todos los campos obligatorios", "error" ) } function addQuickTaskToSelectedDay() { selectedDateForPanel && ( isDatePast( selectedDateForPanel ) ? showNotification( "No puedes agregar tareas a fechas anteriores", "error" ) : showQuickAddTask( selectedDateForPanel ) ) } function closeDailyTaskPanel() { const e = document.getElementById( "dailyTaskPanel" ); e && ( e.classList.add( "hidden" ), selectedDateForPanel = null ) } function quickDeleteTask( e, t ) { const n = tasks[ e ]?.find( ( e => e.id === t ) ); n && confirm( `¬øEliminar la tarea "${n.title}"?` ) && deleteTaskWithUndoImproved( e, t ) } function showQuickAddTask( e ) { if ( isDatePast( e ) ) return void showNotification( "No puedes agregar tareas a fechas anteriores", "error" ); closeAllModals(); const t = document.createElement( "div" ); t.id = "quickAddTaskModal", t.className = "fixed inset-0 bg-black bg-opacity-50 z-50 flex items-center justify-center p-4", t.innerHTML = '\n        <div class="bg-white rounded-xl shadow-2xl max-w-md w-full p-6 max-h-[90vh] overflow-y-auto">\n            <div class="flex justify-between items-center mb-4">\n                <h3 class="text-lg font-semibold text-gray-800">\n                    <i class="fas fa-plus text-blue-500 mr-2"></i>Agregar Nueva Tarea\n                </h3>\n                <button onclick="closeAllModals()" class="text-gray-500 hover:text-gray-700 transition">\n                    <i class="fas fa-times"></i>\n                </button>\n            </div>\n            <form id="quickAddTaskForm" class="space-y-4">\n                <div>\n                    <label class="block text-sm font-medium text-gray-700 mb-2">T√≠tulo <span class="text-red-500">*</span></label>\n                    <input type="text" id="quickAddTaskTitle" required \n                           class="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500">\n                </div>\n                <div>\n                    <label class="block text-sm font-medium text-gray-700 mb-2">Descripci√≥n</label>\n                    <textarea id="quickAddTaskDescription" rows="3" \n                              class="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500"></textarea>\n                </div>\n                <div class="grid grid-cols-2 gap-4">\n                    <div>\n                        <label class="block text-sm font-medium text-gray-700 mb-2">Hora <span class="text-red-500">*</span></label>\n                        <input type="time" id="quickAddTaskTime" required\n                               class="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500">\n                    </div>\n                    <div>\n                        <label class="block text-sm font-medium text-gray-700 mb-2">Prioridad <span class="text-red-500">*</span></label>\n                        <select id="quickAddTaskPriority" required class="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500">\n                            <option value="" disabled selected>Selecciona una prioridad</option>\n                            <option value="1">üî¥ Muy Importante</option>\n                            <option value="2">üü† Importante</option>\n                            <option value="3">üîµ Moderado</option>\n                            <option value="4">‚ö´ No Prioritario</option>\n                        </select>\n                    </div>\n                </div>\n                <div class="flex space-x-3 pt-4 border-t">\n                    <button type="submit" class="flex-1 bg-blue-600 text-white py-2 px-4 rounded-lg hover:bg-blue-700 transition">\n                        <i class="fas fa-save mr-2"></i>Agregar Tarea\n                    </button>\n                    <button type="button" onclick="closeAllModals()" \n                            class="flex-1 bg-gray-300 text-gray-700 py-2 px-4 rounded-lg hover:bg-gray-400 transition">\n                        Cancelar\n                    </button>\n                </div>\n            </form>\n        </div>\n    ', document.body.appendChild( t ); const n = new Date; document.getElementById( "quickAddTaskTime" ).value = n.toTimeString().slice( 0, 5 ), document.getElementById( "quickAddTaskForm" ).addEventListener( "submit", ( t => { t.preventDefault(); const n = document.getElementById( "quickAddTaskTitle" ).value.trim(), a = document.getElementById( "quickAddTaskDescription" ).value.trim(), s = document.getElementById( "quickAddTaskTime" ).value, i = parseInt( document.getElementById( "quickAddTaskPriority" ).value ); if ( !n || !s || !i ) return void showNotification( "Por favor completa todos los campos obligatorios", "error" ); const o = { id: `${e}-${Date.now()}`, title: n, description: a, time: s, priority: i, state: "pending", completed: !1 }; if ( addTaskToDate( e, o ), saveTasks(), renderCalendar(), updateProgress(), enqueueSync( "upsert", e, o ), closeAllModals(), showNotification( "Tarea agregada exitosamente", "success" ), selectedDateForPanel === e ) { const t = new Date( e + "T12:00:00" ).getDate(); showDailyTaskPanel( e, t ) } } ) ) } function closeAllModals() { [ "advancedEditModal", "quickEditModal", "quickAddTaskModal", "editTaskModal", "taskModal" ].forEach( ( e => { const t = document.getElementById( e ); t && t.remove() } ) ), document.querySelectorAll( ".fixed.inset-0.bg-black.bg-opacity-50" ).forEach( ( e => { e.remove() } ) ) } function setupTaskTooltips() { let e = createTaskTooltip(); document.addEventListener( "mouseover", ( function ( t ) { if ( t.target.classList.contains( "task-item" ) ) { const n = t.target.dataset.taskId, a = t.target.dataset.date, s = tasks[ a ]?.find( ( e => e.id === n ) ); s && showTooltip( e, t.target, s ) } } ) ), document.addEventListener( "mouseout", ( function ( t ) { t.target.classList.contains( "task-item" ) && e.classList.add( "opacity-0" ) } ) ) } function createTaskTooltip() { const e = document.createElement( "div" ); return e.id = "task-tooltip", e.className = "fixed bg-gray-800 text-white text-xs rounded px-2 py-1 z-50 pointer-events-none opacity-0 transition-opacity duration-200 max-w-xs", document.body.appendChild( e ), e } function showTooltip( e, t, n ) { const a = t.getBoundingClientRect(); e.innerHTML = `\n        <div class="font-semibold">${n.title}</div>\n        ${n.description ? `<div class="text-gray-300">${n.description}</div>` : ""}\n        ${n.time ? `<div class="text-blue-300"><i class="far fa-clock mr-1"></i>${n.time}</div>` : ""}\n        <div class="text-gray-400 text-xs mt-1">\n            ${n.completed ? "‚úì Completada" : "Pendiente"} ‚Ä¢ Arrastra para mover\n        </div>\n    `, e.style.left = Math.min( a.left, window.innerWidth - e.offsetWidth - 10 ) + "px", e.style.top = a.top - e.offsetHeight - 5 + "px", e.classList.remove( "opacity-0" ) } function setupDragAndDrop() { const e = document.getElementById( "calendar" ); e && ( e.addEventListener( "dragstart", handleDragStart ), e.addEventListener( "dragend", handleDragEnd ), e.addEventListener( "dragover", handleDragOver ), e.addEventListener( "dragleave", handleDragLeave ), e.addEventListener( "drop", handleDrop ) ) } function handleDragStart( e ) { e.target.classList.contains( "task-item" ) && ( e.stopPropagation(), draggedTask = e.target.dataset.taskId, draggedFromDate = e.target.dataset.date, e.target.style.opacity = "0.5" ) } function handleDragEnd( e ) { e.target.classList.contains( "task-item" ) && ( e.target.style.opacity = "1", draggedTask = null, draggedFromDate = null ) } function handleDragOver( e ) { e.preventDefault(); const t = e.target.closest( ".calendar-day" ); t && t.classList.add( "bg-yellow-100" ) } function handleDragLeave( e ) { const t = e.target.closest( ".calendar-day" ); t && t.classList.remove( "bg-yellow-100" ) } function handleDrop( e ) { e.preventDefault(); const t = e.target.closest( ".calendar-day" ); if ( t && draggedTask && draggedFromDate ) { const e = t.dataset.date; if ( isDatePast( e ) ) return showNotification( "No puedes mover tareas a fechas anteriores", "error" ), void document.querySelectorAll( ".bg-yellow-100" ).forEach( ( e => { e.classList.remove( "bg-yellow-100" ) } ) ); const n = tasks[ draggedFromDate ]?.find( ( e => e.id === draggedTask ) ); if ( n && !canMoveTask( n ) ) { return showNotification( `Las tareas "${( PRIORITY_LEVELS[ n.priority ] || PRIORITY_LEVELS[ 3 ] ).label}" no se pueden mover. Solo se pueden editar o eliminar.`, "error" ), void document.querySelectorAll( ".bg-yellow-100" ).forEach( ( e => { e.classList.remove( "bg-yellow-100" ) } ) ) } e !== draggedFromDate && ( moveTask( draggedFromDate, e, draggedTask ), showNotification( "Tarea movida exitosamente", "success" ) ) } document.querySelectorAll( ".bg-yellow-100" ).forEach( ( e => { e.classList.remove( "bg-yellow-100" ) } ) ) } function handleDragStart( e ) { if ( e.target.classList.contains( "task-item" ) ) { e.stopPropagation(), draggedTask = e.target.dataset.taskId, draggedFromDate = e.target.dataset.date; const t = tasks[ draggedFromDate ]?.find( ( e => e.id === draggedTask ) ); if ( t && !canMoveTask( t ) ) { e.target.style.opacity = "0.3", e.target.style.cursor = "not-allowed"; const t = document.createElement( "div" ); t.className = "fixed bg-red-600 text-white text-xs px-2 py-1 rounded z-50 pointer-events-none", t.textContent = "Esta tarea no se puede mover"; const n = e.target.getBoundingClientRect(); t.style.left = n.left + "px", t.style.top = n.top - 30 + "px", document.body.appendChild( t ), setTimeout( ( () => t.remove() ), 2e3 ) } else e.target.style.opacity = "0.5" } } function moveTask( e, t, n ) { const a = tasks[ e ], s = a?.findIndex( ( e => e.id === n ) ); if ( -1 !== s ) { const i = a.splice( s, 1 )[ 0 ], o = i.title; 0 === a.length && delete tasks[ e ], tasks[ t ] || ( tasks[ t ] = [] ), i.id = `${t}-${Date.now()}`, tasks[ t ].push( i ), addToChangeLog( "moved", o, t, e, t ), saveTasks(), renderCalendar(), updateProgress(), enqueueSync( "delete", e, { id: n } ), enqueueSync( "upsert", t, i ) } } function closeModal() { const e = document.getElementById( "taskModal" ); e && ( e.classList.add( "opacity-0" ), e.querySelector( "#modal-content-wrapper" ).classList.add( "scale-95" ), setTimeout( ( () => e.classList.add( "hidden" ) ), 300 ) ) } function toggleTask( e, t ) { const n = tasks[ e ]?.find( ( e => e.id === t ) ); n && ( n.completed = !n.completed, saveTasks(), renderCalendar(), updateProgress(), enqueueSync( "upsert", e, n ) ) } function deleteTaskWithUndoImproved( e, t ) { const n = tasks[ e ], a = n?.findIndex( ( e => e.id === t ) ); if ( -1 !== a ) { const s = n[ a ]; lastDeletedTask = { ...s }, lastDeletedDate = e, addToChangeLog( "deleted", s.title, e, null, null, t ), tasks[ e ] = tasks[ e ].filter( ( e => e.id !== t ) ), 0 === tasks[ e ].length && delete tasks[ e ], enqueueSync( "delete", e, { id: t } ), saveTasks(), renderCalendar(), updateProgress(), showUndoNotification() } } function showUndoNotification() { const e = document.createElement( "div" ); e.className = "fixed bottom-4 left-4 bg-gray-800 text-white px-6 py-3 rounded-lg shadow-lg z-50 flex items-center space-x-3", e.innerHTML = '\n        <span>Tarea eliminada</span>\n        <button onclick="undoDelete()" class="bg-blue-500 px-3 py-1 rounded text-sm hover:bg-blue-600 transition">\n            Deshacer\n        </button>\n        <button onclick="this.parentElement.remove()" class="text-gray-400 hover:text-white">\n            <i class="fas fa-times"></i>\n        </button>\n    ', document.body.appendChild( e ), setTimeout( ( () => e.remove() ), 5e3 ) } function undoDelete() { lastDeletedTask && lastDeletedDate && ( tasks[ lastDeletedDate ] || ( tasks[ lastDeletedDate ] = [] ), tasks[ lastDeletedDate ].push( lastDeletedTask ), enqueueSync( "upsert", lastDeletedDate, lastDeletedTask ), saveTasks(), renderCalendar(), updateProgress(), lastDeletedTask = null, lastDeletedDate = null, showNotification( "Tarea restaurada exitosamente", "success" ), document.querySelector( ".fixed.bottom-4.left-4" )?.remove() ) } function changeMonth( e ) { currentDate.setMonth( currentDate.getMonth() + e ), renderCalendar(), updateProgress() } function clearWeek() { if ( !confirm( "¬øEst√°s seguro de que quieres limpiar todas las tareas de esta semana?" ) ) return; const e = new Date, t = new Date( e ); t.setDate( e.getDate() - e.getDay() ); const n = []; for ( let e = 0; e < 7; e++ ) { const a = new Date( t ); a.setDate( t.getDate() + e ); const s = a.toISOString().split( "T" )[ 0 ]; tasks[ s ] && ( tasks[ s ].forEach( ( e => { n.push( { dateStr: s, taskId: e.id } ) } ) ), delete tasks[ s ] ) } n.forEach( ( ( { dateStr: e, taskId: t } ) => { enqueueSync( "delete", e, { id: t } ) } ) ), saveTasks(), renderCalendar(), updateProgress(), showNotification( "Semana limpiada exitosamente" ) } function clearMonth() { if ( !confirm( "¬øEst√°s seguro de que quieres limpiar todas las tareas de este mes?" ) ) return; const e = currentDate.getFullYear(), t = currentDate.getMonth(), n = []; Object.keys( tasks ).forEach( ( a => { const s = new Date( a + "T12:00:00" ); s.getFullYear() === e && s.getMonth() === t && ( tasks[ a ].forEach( ( e => { n.push( { dateStr: a, taskId: e.id } ) } ) ), delete tasks[ a ] ) } ) ), n.forEach( ( ( { dateStr: e, taskId: t } ) => { enqueueSync( "delete", e, { id: t } ) } ) ), saveTasks(), renderCalendar(), updateProgress(), showNotification( "Mes limpiado exitosamente" ) } function updateProgress() { const e = getTodayString(), t = tasks[ e ] || [], n = t.filter( ( e => "completed" === e.state ) ).length, a = t.filter( ( e => "inProgress" === e.state ) ).length, s = t.filter( ( e => "paused" === e.state ) ).length, i = t.filter( ( e => "pending" === e.state ) ).length, o = 0 === t.length ? 0 : Math.round( n / t.length * 100 ), r = document.getElementById( "progressBar" ), l = document.getElementById( "progressText" ); r && ( r.style.width = `${o}%` ), l && ( l.innerHTML = `\n            ${o}% | \n            <span class="text-green-600">${n} ‚úì</span> \n            <span class="text-blue-600">${a} ‚ñ∂</span> \n            <span class="text-orange-600">${s} ‚è∏</span>\n            <span class="text-gray-600">${i} ‚è∏</span>\n        ` ) } function exportToExcel() { if ( "undefined" == typeof XLSX ) return void showNotification( "Error: XLSX library not loaded", "error" ); const e = XLSX.utils.book_new(), t = [ [ "Fecha", "T√≠tulo", "Descripci√≥n", "Hora", "Completada" ] ]; Object.entries( tasks ).forEach( ( ( [ e, n ] ) => { n.forEach( ( n => { t.push( [ e, n.title, n.description || "", n.time || "", n.completed ? "S√≠" : "No" ] ) } ) ) } ) ); const n = XLSX.utils.aoa_to_sheet( t ); XLSX.utils.book_append_sheet( e, n, "Tareas" ), XLSX.writeFile( e, `tareas_${getTodayString()}.xlsx` ), showNotification( "Excel exportado exitosamente" ) } function requestNotificationPermission() { return "Notification" in window ? "granted" === Notification.permission ? ( notificationsEnabled = !0, updateNotificationButton(), startNotificationService(), Promise.resolve( "granted" ) ) : Notification.requestPermission().then( ( e => ( "granted" === e ? ( notificationsEnabled = !0, updateNotificationButton(), startNotificationService(), showNotification( "Notificaciones activadas correctamente", "success" ) ) : showNotification( "Permisos de notificaci√≥n denegados", "error" ), e ) ) ) : ( showNotification( "Este navegador no soporta notificaciones", "error" ), Promise.resolve( "denied" ) ) } function toggleNotifications() { "Notification" in window ? "granted" === Notification.permission ? ( notificationsEnabled = !notificationsEnabled, updateNotificationButton(), notificationsEnabled ? ( startNotificationService(), showNotification( "Notificaciones activadas", "success" ) ) : ( stopNotificationService(), showNotification( "Notificaciones desactivadas", "info" ) ) ) : "default" === Notification.permission ? requestNotificationPermission() : showNotification( "Los permisos de notificaci√≥n fueron denegados. Act√≠valos en la configuraci√≥n del navegador.", "error" ) : showNotification( "Este navegador no soporta notificaciones", "error" ) } function startNotificationService() { notificationInterval && ( clearInterval( notificationInterval ), notificationInterval = null ), notificationsEnabled && "granted" === Notification.permission ? ( console.log( "Iniciando servicio de notificaciones mejorado" ), resetDailyNotificationStatus(), setTimeout( ( () => { try { checkDailyTasksImproved() } catch ( e ) { console.error( "Error en checkDailyTasks inicial:", e ) } } ), 1e3 ), notificationInterval = setInterval( ( () => { try { notificationsEnabled && "granted" === Notification.permission ? checkDailyTasksImproved() : ( console.log( "‚ö†Ô∏è Notificaciones deshabilitadas en intervalo" ), stopNotificationService() ) } catch ( e ) { console.error( "Error en intervalo de notificaciones:", e ) } } ), 3e4 ), setInterval( ( () => { notificationsEnabled && "granted" === Notification.permission && checkDailyTasksImproved( !0 ) } ), 3e5 ) ) : console.log( "‚ùå Notificaciones no habilitadas o sin permisos" ) } function resetDailyNotificationStatus() { const e = new Date; 0 === e.getHours() && e.getMinutes() <= 1 && ( notificationStatus = { morning: !1, midday: !1, evening: !1, taskReminders: new Set }, sentNotifications.clear(), console.log( "üîÑ Estado de notificaciones diarias reseteado" ) ) } function stopNotificationService() { notificationInterval && ( clearInterval( notificationInterval ), notificationInterval = null, console.log( "Servicio de notificaciones detenido" ) ) } function updateNotificationButton() { const e = document.getElementById( "notificationsBtn" ); if ( !e ) return; const t = "granted" === Notification.permission; notificationsEnabled && t ? ( e.className = "bg-green-500 text-white px-4 py-2 rounded-lg hover:bg-green-600 transition duration-300", e.innerHTML = '<i class="fas fa-bell mr-2"></i>Notificaciones ON', e.title = "Notificaciones activadas - Click para desactivar" ) : t ? ( e.className = "bg-gray-500 text-white px-4 py-2 rounded-lg hover:bg-gray-600 transition duration-300", e.innerHTML = '<i class="fas fa-bell-slash mr-2"></i>Notificaciones OFF', e.title = "Notificaciones desactivadas - Click para activar" ) : ( e.className = "bg-yellow-500 text-white px-4 py-2 rounded-lg hover:bg-yellow-600 transition duration-300", e.innerHTML = '<i class="fas fa-bell mr-2"></i>Permitir Notificaciones', e.title = "Click para solicitar permisos de notificaci√≥n" ) } function checkDailyTasksImproved( e = !1 ) { if ( !notificationsEnabled || "granted" !== Notification.permission ) return; const t = new Date, n = getTodayString(), a = t.getHours(), s = t.getMinutes(), i = ( String( a ).padStart( 2, "0" ), String( s ).padStart( 2, "0" ), tasks[ n ] || [] ), o = i.filter( ( e => "pending" === e.state ) ), r = i.filter( ( e => "inProgress" === e.state ) ); resetDailyNotificationStatus(), i.forEach( ( e => { if ( !e.time || "completed" === e.state ) return; const [ t, i ] = e.time.split( ":" ).map( Number ), o = 60 * t + i, r = 60 * a + s, l = `${e.id}-now`; if ( !notificationStatus.taskReminders.has( l ) && r >= o && r <= o + 2 && "pending" === e.state ) { e.state = "inProgress", e.completed = !1, saveTasks(), renderCalendar(), enqueueSync( "upsert", n, e ); const t = PRIORITY_LEVELS[ e.priority ] || PRIORITY_LEVELS[ 3 ]; showDesktopNotification( `üöÄ Iniciando: ${e.title}`, `Tarea ${t.label.toLowerCase()} comenz√≥. Estado: En Proceso`, l, !0 ), notificationStatus.taskReminders.add( l ) } } ) ); const l = o.length, c = r.length; if ( !notificationStatus.morning && 9 === a && s <= 30 && ( l > 0 || c > 0 ) ) { let e = ""; l > 0 && ( e += `${l} pendiente${l > 1 ? "s" : ""}` ), c > 0 && ( e && ( e += " y " ), e += `${c} en proceso` ), showDesktopNotification( "¬°Buenos d√≠as! üåÖ", `Tienes ${e} para hoy`, "morning-reminder" ), notificationStatus.morning = !0 } } function clearTaskNotifications( e ) { [ `${e}-reminder-15`, `${e}-now`, `${e}-late` ].forEach( ( e => { notificationStatus.taskReminders.delete( e ) } ) ) } function showDesktopNotification( e, t, n, a = !1 ) { try { if ( sentNotifications.has( n ) ) return void console.log( "‚è≠Ô∏è Notificaci√≥n duplicada evitada:", n ); const s = /Android|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test( navigator.userAgent ), i = { body: t, icon: getFaviconAsDataUrl(), tag: n, requireInteraction: !!s || a, silent: !1, badge: getFaviconAsDataUrl(), timestamp: Date.now(), vibrate: s ? [ 200, 100, 200 ] : void 0, renotify: !0, actions: s ? [ { action: "view", title: "Ver tareas" }, { action: "close", title: "Cerrar" } ] : void 0 }, o = new Notification( e, i ); sentNotifications.add( n ), s && showInAppNotification( e, t ), setTimeout( ( () => { sentNotifications.delete( n ) } ), s ? 18e4 : 3e5 ), o.onclick = function () { window.focus(), o.close() }, a || s || setTimeout( ( () => { o.close() } ), 8e3 ), console.log( "Notificaci√≥n enviada:", e, "- Tag:", n, "- M√≥vil:", s ) } catch ( n ) { console.error( "‚ùå Error enviando notificaci√≥n:", n ), showInAppNotification( e, t ) } } function showInAppNotification( e, t ) { const n = document.createElement( "div" ); n.className = "fixed top-20 left-4 right-4 bg-blue-600 text-white p-4 rounded-lg shadow-2xl z-50 transform -translate-y-full transition-transform duration-500", n.innerHTML = `\n        <div class="flex items-start justify-between">\n            <div class="flex-1">\n                <div class="font-semibold text-sm">${e}</div>\n                <div class="text-xs mt-1 opacity-90">${t}</div>\n            </div>\n            <button onclick="this.closest('.fixed').remove()" class="ml-2 text-white hover:text-gray-200">\n                <i class="fas fa-times"></i>\n            </button>\n        </div>\n    `, document.body.appendChild( n ), setTimeout( ( () => { n.classList.remove( "-translate-y-full" ) } ), 100 ), setTimeout( ( () => { n.classList.add( "-translate-y-full" ), setTimeout( ( () => n.remove() ), 500 ) } ), 8e3 ) } function getFaviconAsDataUrl() { return `data:image/svg+xml;base64,${btoa( '\n        <svg xmlns="http://www.w3.org/2000/svg" width="64" height="64" viewBox="0 0 64 64">\n            <rect width="64" height="64" rx="12" fill="#3B82F6"/>\n            <path d="M20 32l8 8 16-16" stroke="white" stroke-width="4" stroke-linecap="round" stroke-linejoin="round" fill="none"/>\n            <circle cx="48" cy="16" r="6" fill="#EF4444"/>\n        </svg>\n    ' )}` } function showNotification( e, t = "success" ) { const n = document.createElement( "div" ), a = { success: "bg-green-500 text-white fa-check-circle", error: "bg-red-500 text-white fa-exclamation-circle", info: "bg-blue-500 text-white fa-info-circle" }, { className: s, icon: i } = t in a ? { className: a[ t ].split( " " ).slice( 0, -1 ).join( " " ), icon: a[ t ].split( " " ).pop() } : { className: "bg-blue-500 text-white", icon: "fa-info-circle" }; n.className = `fixed top-4 right-4 px-6 py-3 rounded-lg shadow-lg z-50 transition-all duration-300 transform translate-x-full ${s}`, n.innerHTML = `\n        <div class="flex items-center space-x-2">\n            <i class="fas ${i}"></i>\n            <span>${e}</span>\n        </div>\n    `, document.body.appendChild( n ), setTimeout( ( () => n.classList.remove( "translate-x-full" ) ), 100 ), setTimeout( ( () => { n.classList.add( "translate-x-full" ), setTimeout( ( () => n.remove() ), 300 ) } ), 3e3 ) } function saveTasks() { try { localStorage.setItem( "tasks", JSON.stringify( tasks ) ) } catch ( e ) { console.error( "Error saving tasks to localStorage:", e ), showNotification( "Error al guardar tareas", "error" ) } } function clearAll() { const e = Object.values( tasks ).reduce( ( ( e, t ) => e + t.length ), 0 ); if ( 0 === e ) return void showNotification( "No hay tareas para eliminar", "info" ); if ( !confirm( `¬øEst√°s seguro de que quieres eliminar TODAS las tareas del calendario? (${e} tareas)` ) ) return; if ( !confirm( "‚ö†Ô∏è ESTA ACCI√ìN NO SE PUEDE DESHACER. ¬øContinuar?" ) ) return; const t = []; Object.entries( tasks ).forEach( ( ( [ e, n ] ) => { n.forEach( ( n => { t.push( { dateStr: e, taskId: n.id } ) } ) ) } ) ), tasks = {}, saveTasks(), renderCalendar(), updateProgress(), closeDailyTaskPanel(), t.forEach( ( ( { dateStr: e, taskId: t } ) => { enqueueSync( "delete", e, { id: t } ) } ) ), showNotification( `${e} tareas eliminadas del calendario`, "success" ) } "serviceWorker" in navigator && window.addEventListener( "load", ( () => { navigator.serviceWorker.register( "/sw.js" ).then( ( e => { console.log( "Service Worker registrado con √©xito:", e ) } ) ).catch( ( e => { console.log( "Error al registrar el Service Worker:", e ) } ) ) } ) ), window.addEventListener( "beforeinstallprompt", ( e => { e.preventDefault(), deferredPrompt = e; const t = document.getElementById( "install-button" ); t ? ( t.style.display = "block", t.addEventListener( "click", ( () => { deferredPrompt.prompt(), deferredPrompt.userChoice.then( ( e => { "accepted" === e.outcome ? console.log( "Usuario instal√≥ la PWA" ) : console.log( "Usuario rechaz√≥ la instalaci√≥n" ), deferredPrompt = null } ) ) } ) ) ) : console.warn( "No se encontr√≥ el bot√≥n de instalaci√≥n" ) } ) ), document.addEventListener( "DOMContentLoaded", ( function () { initFirebase(), loadTasks(), renderCalendar(), updateProgress(), setupEventListeners(), requestNotificationPermission(), initNotifications(), setupDragAndDrop(), setupTaskTooltips(), setupNetworkListeners(), setupDateInput() } ) ), setInterval( ( () => { currentUser && isOnline && !isSyncing && ( 0 === syncQueue.size ? ( console.log( "üîÑ Sync peri√≥dico: verificando cambios remotos" ), syncFromFirebase() ) : ( console.log( "‚è≥ Sync peri√≥dico: hay cambios pendientes, procesando cola" ), processSyncQueue() ) ) } ), 6e5 ), window.addEventListener( "beforeunload", ( () => { syncQueue.size > 0 && currentUser && isOnline && navigator.sendBeacon && navigator.sendBeacon( "/sync-beacon", JSON.stringify( { uid: currentUser.uid, operations: Array.from( syncQueue.values() ) } ) ) } ) ), document.addEventListener( "visibilitychange", ( () => { !document.hidden && syncQueue.size > 0 && currentUser && isOnline && setTimeout( ( () => processSyncQueue() ), 1e3 ) } ) );
